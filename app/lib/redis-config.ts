import Redis from 'ioredis';

// C·∫•u h√¨nh Redis URL
const REDIS_URL = process.env.REDIS_URL || 'redis://default:password@host:port';

// K·∫øt n·ªëi Redis v·ªõi x·ª≠ l√Ω l·ªói
let redis: Redis;

try {
  redis = new Redis(REDIS_URL);
  
  // Ki·ªÉm tra k·∫øt n·ªëi Redis
  redis.on('error', (error) => {
    console.error('L·ªói k·∫øt n·ªëi Redis:', error);
  });

  redis.on('connect', () => {
    console.log('ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn Redis');
  });
} catch (error) {
  console.error('Kh√¥ng th·ªÉ kh·ªüi t·∫°o k·∫øt n·ªëi Redis:', error);
  // T·∫°o instance Redis gi·∫£ ƒë·ªÉ tr√°nh l·ªói
  redis = new Redis({
    host: 'localhost',
    port: 6379,
    lazyConnect: true,
  });
}

// Cache config
export const CACHE_TTL_HOURS = parseInt(process.env.CACHE_TTL_HOURS || '10');
export const CACHE_TTL_SECONDS = CACHE_TTL_HOURS * 60 * 60;

// API call limit config
export const NO_LIMIT = process.env.NO_LIMIT === 'true';
export const MAX_API_CALLS_PER_DAY = parseInt(process.env.MAX_API_CALLS_PER_DAY || '3');

// Kh√≥a cho d·ªØ li·ªáu cache
export const FLIGHT_DATA_KEY = 'flight_data';
export const CACHE_TIMESTAMP_KEY = 'flight_data_timestamp';
export const API_CALL_COUNT_KEY = 'api_call_count';
export const API_CALL_DATE_KEY = 'api_call_date';

// C√†i ƒë·∫∑t API
export const API_KEY = process.env.AVIATIONSTACK_API_KEY || 'f20b5fe5cfd85d06b7c9b71dcd0a4b8e';

// Ki·ªÉm tra xem bi·∫øn m√¥i tr∆∞·ªùng c√≥ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng kh√¥ng
if (!API_KEY) {
  console.warn('AVIATIONSTACK_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh. H√£y ƒë·∫£m b·∫£o thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng.');
}

if (!REDIS_URL) {
  console.warn('REDIS_URL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh. H√£y ƒë·∫£m b·∫£o thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng.');
}

if (NO_LIMIT) {
  console.log('üöÄ Ch·∫ø ƒë·ªô NO_LIMIT ƒë∆∞·ª£c b·∫≠t: Kh√¥ng gi·ªõi h·∫°n s·ªë l·∫ßn g·ªçi API');
}

export { redis }; 